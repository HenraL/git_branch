#!/bin/env pyhon3
##
## EPITECH PROJECT, 2021
## git_branch (Workspace)
## File description:
## install_program
##

print("Welcome to the install_program.sh script")
print("This script will install the program _git_branch_ onto your computer")

import os, platform, requests, sys, shutil
from shutil import ReadError
from time import sleep

from random import randint

__Author__ = "Henry Letellier"
__Program_Name__ = "Git Branch"

class const:
    """ The constants for the colour class """
    def __init__(self) -> None:
        self.Current_OS = platform.system()
        # Colour class related vars
        self.colorise_Output = True
        # The final reference created depending on if you are unser windows or not
        self.Color_Pallet = dict()
        self.default_background = '0'
        self.default_foreground = 'A'
        self.windows_colour_command = "color "
        self.non_windows_colour_command = "echo -e "
        # Windows Colour pallet (+ r (equivalent to a 'color AA'))
        self.options_for_colour_pallet = "042615378CAE9DBFr"
        self.options_for_testing_color_pallet = "0123456789ABCDEFr"
        self.non_windows_colours = []
        # Create colour list
        for i in range(30,38):
            self.non_windows_colours.append(f"{i}")
        for i in range(90, 98):
            self.non_windows_colours.append(f"{i}")
        self.non_windows_colours.append("0")

class Colour:
    """ The class in charge of displaying color """
    def __init__(self, My_Globals) -> None:
        """ passing the globals the class needs """
        self.version = 5.0
        self.Current_OS = My_Globals.Current_OS
        self.Color_Pallet = My_Globals.Color_Pallet
        self.Windows_Color_Command = My_Globals.Windows_Color_Command
        self.non_windows_colour_command = My_Globals.Non_Windows_Color_Command
        self.colorise_output = My_Globals.Colorise_Output
        self.opts_color_pallet = My_Globals.Options_For_Color_Pallet
        self.opts_for_testing_color_pallet = My_Globals.Options_for_testing_Color_Pallet
        self.non_windows_colours = My_Globals.Non_Windows_Colors
        self.default_background = My_Globals.default_background
        self.default_foreground = My_Globals.default_foreground
        self.current_foreground = self.default_foreground
        self.current_background = self.default_background

    def initialise_pallet_if_not(self):
        """ If the pallet is not initialised, initialise it"""
        if (len(self.Color_Pallet) == 0):
            self.init_pallet()

    def output_for_windows_system(self, Input_Color) -> None:
        """ If the system is windows, setting the color for it """
        if (self.Current_OS == "Windows"):
            os.system(f"{self.Windows_Color_Command}{self.Color_Pallet[Input_Color]}")

    def output_for_non_Windows_system(self, Input_Color) -> None:
        """ If the system is not windows, setting the color for it """
        if (self.Current_OS != "Windows"):
            os.system(f"{self.non_windows_colour_command}\"{self.Color_Pallet[Input_Color]}\"")

    def Check_if_Digit_Is_In_List(self, Input_Didgit:str) -> bool:
        if (Input_Didgit in self.opts_color_pallet) == True:
            return True
        return False

    def Color_Input_Error_Handling(self, Input_Color:str) -> str:
        """ Deal with potential errors that might occur during color input """
        if (len(Input_Color) == 1):
            if (self.Check_if_Digit_Is_In_List(Input_Color[0]) == False):
                Input_Color = f'{self.default_background}{self.default_foreground}'
            else:
                temp = Input_Color[0]
                Input_Color=f"{temp}{self.default_foreground}"
        elif (len(Input_Color) > 2):
            if (self.Check_if_Digit_Is_In_List(Input_Color[0]) == False):
                Input_Color[0] = self.default_background
            if (self.Check_if_Digit_Is_In_List(Input_Color[1]) == False):
                Input_Color[1] = self.default_foreground
            Input_Color=f"{Input_Color[0]}{Input_Color[1]}"

        elif (len(Input_Color) < 1):
            Input_Color = f'{self.default_background}{self.default_foreground}'
        else:
            return Input_Color
        return Input_Color

    def Display(self, Input_Color) -> None:
        """ If setting the color is true, changing the color for the required system """
        if (self.colorise_output == True):
            self.initialise_pallet_if_not()
            Input_Color = self.Color_Input_Error_Handling(Input_Color)
            self.output_for_non_Windows_system(Input_Color)
            self.output_for_windows_system(Input_Color)

    def init_for_non_windows(self) -> None:
        """ If the system is not windows, initialising pallet for it """
        if (self.Current_OS != "Windows") :
            g=0
            for i in self.opts_color_pallet:
                h=0
                for b in self.opts_color_pallet:
                    self.Color_Pallet[f"{i}{b}"]=f"\\e[{int(self.non_windows_colours[g])+10}m\\e[{int(self.non_windows_colours[h])}m"
                    h+=1
                g+=1

    def init_for_windows(self) -> None:
        """ If the system is windows, initialising the pallet for it """
        if (self.Current_OS == "Windows"):
            for i in self.opts_color_pallet:
                for b in self.opts_color_pallet:
                    if (i == 'r'):
                        if (b == 'r'):
                            self.Color_Pallet[f"{i}{b}"] = f"{self.Windows_Color_Command}0A"
                        else:
                            self.Color_Pallet[f"{i}{b}"] = f"{self.Windows_Color_Command}0{b}"
                    elif (b == 'r'):
                        self.Color_Pallet[f"{i}{b}"] = f"{self.Windows_Color_Command}{i}A"
                    else:
                        self.Color_Pallet[f"{i}{b}"] = f"{self.Windows_Color_Command}{i}{b}"

    def init_pallet(self) -> None:
        """ Initialising the color pallet for the program """
        self.init_for_non_windows()
        self.init_for_windows()

    def test_colors(self, delay=0.05) -> None:
        """ This is a small function to test the output of the colors (avoid using if epileptic) """
        if (delay == 0):
            delay = 0.05
        for i in self.opts_for_testing_color_pallet:
            for b in self.opts_for_testing_color_pallet:
                self.Display(f'{i}{b}')
                print(f"The color is: {i}{b}")
                sleep(delay)

    def random_color(self) -> None:
        """ Change the color to a random choice (r) excluded """
        color2_found = False
        len_color = len(self.opts_for_testing_color_pallet)-2
        color1 = randint(0, len_color)
        while color2_found == False:
            color2 = randint(0, len_color)
            if color1 != color2:
                color2_found = True
        self.Display(f'{self.opts_for_testing_color_pallet[color1]}{self.opts_for_testing_color_pallet[color2]}')

    def random_foreground_color(self, background_color:str='0') -> None:
        """ Change the foreground color to a random choice (r) included """
        len_color = len(self.opts_for_testing_color_pallet)-1
        colours_identical = True
        color1 = randint(0, len_color)
        while colours_identical == True:
            color1 = randint(0, len_color)
            if color1 != background_color:
                colours_identical = False
        self.Display(f'{background_color}{self.opts_for_testing_color_pallet[color1]}')

    def intellicut(self, string:str, symb:str='%', skip_length:int=2) -> list[str,str]:
        """ Cut a string following certain rules """
        if (symb not in string):
            return string
        final_list = list()
        temp_string = str()
        skip = 0
        has_been_skipping = False
        for i in range(len(string)):
            if (skip > 0):
                skip -= 1
                temp_string+=string[i]
                # print(f"143 | in if    , temp_string = {temp_string}, skip = {skip}")
            elif skip == 0 and has_been_skipping == True:
                has_been_skipping = False
                final_list.append(temp_string)
                temp_string = str()
                temp_string+=string[i]
                # print(f"149 | in elif 1 , temp_string = {temp_string}, skip = {skip}")
            elif (string[i] == symb and string[i+1] == symb):
                temp_string+=string[i]
                skip=1
                # print(f"153 | in elif 2, temp_string = {temp_string}, skip = {skip}")
            elif (string[i] == symb and skip == 0):
                skip=skip_length
                has_been_skipping = True
                final_list.append(temp_string)
                # print(f"158 | in elif 3, temp_string = {temp_string}, skip = {skip}")
                temp_string = str()
                # print(f"153 | in elif 3, temp_string = {temp_string}, skip = {skip}")
            else:
                temp_string+=string[i]
                # print(f"163 | in else  , temp_string = {temp_string}, skip = {skip}")
        final_list.append(temp_string)
        return final_list

    def print_color(self, formated_string:str, symb:str='%') -> None:
        """ Change the color of the string based on key points"""
        processed_string = self.intellicut(formated_string, symb, 2)
        # print(f"processed_string = {processed_string}")
        self.initialise_pallet_if_not()
        for i in range(len(processed_string)):
            # print(f"processed_string[{i}] = {processed_string[i]}")
            if (processed_string[i] in self.Color_Pallet):
                # print("in if")
                self.Display(processed_string[i])
            else:
                # print("in else")
                print(processed_string[i], end='')

class Constants:
    """ This class will set the constants for the program """
    def __init__(self, color) -> None:
        """ This function will set the constants for the program """
        self.author = "Henry Letellier"
        self.system = platform.system()
        self.installer_version = 1.0
        self.home = "https://github.com/HenraL/"
        self.repository = "git_branch/"
        self.dependencies = "files/dependencies/"
        self.exectable_path = "files/install_prog/"
        self.exectable_name = "git_branch"
        self.temp_folder_name = "git_branch_temp"
        self.destination = "/bin/"
        self.bash_file_tree_link = f"{self.home}{self.repository}{self.dependencies}/bash_file_tree.dependencies"
        self.bash_scripts_list = list()
        self.error = 84
        self.success = 0
        self.permission_error = 1
        self.permissions = 0o777
        self.encoding = "utf-8"
        self.max_char_size = 0
        self.ci = color
        self.proceed = True
        # self.install = True
        self.status = self.success

class Get(Constants):
    """ def get_bash_scripts(self):"""
    def online_file(self, url) -> str:
        print(f"Downloading '{url}' ...")
        try:
            return requests.get(url).content
        except requests.exceptions.RequestException:
            print("Failed to get the file")
            self.status = self.error
            return self.error

    def decrypted_content(self, content) -> str:
        """ Decrypt a given content """
        try:
            file=open(content,"rb").read()
            return file
        except ReadError:
            try:
                file=open(content,"r", encoding=self.encoding).read()
                return file
            except ReadError:
                file=content.decode()
                return file
            except UnicodeDecodeError:
                return content

    def list_of_bash_scripts(self) -> None:
        """ Write a file with the content """
        content = self.online_file(self.bash_file_tree_link)
        file_content = self.decrypted_content(content)
        self.bash_scripts_list = file_content.split("\n")
        if self.status == self.error:
            print("Failed to get the bash scripts list")
            Delete.folder(self, self.temp_folder_name)
            sys.exit(self.error)

    def if_destination_folder_exists(self, destination) -> bool:
        """ Check if the destination folder exists """
        if os.path.isdir(destination):
            return True
        else:
            return False

    def current_working_directory(self) -> str:
        """ Return the current working directory """
        return os.getcwd()

    def bash_files(self, bash_list:list) -> None:
        """ Write a file with the content """
        for bash_file in bash_list:
            content = self.online_file(f"{self.home}{self.repository}{self.dependencies}{bash_file}")
            file_content = self.decrypted_content(content)
            Write.file(self, f"{self.temp_folder_name}/{bash_file}", file_content)
            os.chmod(f"{self.temp_folder_name}/{bash_file}", self.permissions)
            if self.status == self.error:
                return self.error

    def program_executable(self) -> None:
        """ Write a file with the content """
        content = self.online_file(f"{self.home}{self.repository}{self.exectable_path}{self.system.lower()}/{self.exectable_name}")
        file_content = self.decrypted_content(content)
        Write.file(self, f"{self.temp_folder_name}/{self.exectable_name}", file_content)
        os.chmod(f"{self.temp_folder_name}/{self.exectable_name}", self.permissions)
        if self.status == self.error:
            return self.error

    def binary_name(self, bin_path) -> str:
        """ Return the binary name """
        if self.system == "Windows":
            return bin_path.split("\\")[-1]
        else:
            return bin_path.split("/")[-1]

    def options(self) -> None:
        """ Return the options for the user """
        if "-h" in sys.argv or "--help" in sys.argv or "-?" in sys.argv or "/?" in sys.argv:
            self.ci.Display("0A")
            print("This script will install the program _git_branch_ onto your computer")
            print("\nUsage:")
            print(f"\tsudo {self.binary_name(sys.argv[0])} [options]")
            print("\nOptions:")
            print("\t-h, --help\t\tDisplay this help")
            print("\t-v, --version\t\tDisplay the version of the program")
            print("\t-i, --install\t\tInstall the program")
            print("\nExamples:")
            print(f"\t{self.binary_name(sys.argv[0])}\tto install the program")
            print(f"\t{self.binary_name(sys.argv[0])} -h\tto display the help")
            print(f"\t{self.binary_name(sys.argv[0])} --help\tto display the help")
            print(f"\t{self.binary_name(sys.argv[0])} -v\tto display the version")
            print(f"\t{self.binary_name(sys.argv[0])} --version\tto display the version")
            print(f"\t{self.binary_name(sys.argv[0])} --i\tto install the program")
            print(f"\t{self.binary_name(sys.argv[0])} --install\tto install the program")
            print("\n")
            self.proceed = False
            return self.success

        elif "-v" in sys.argv or "--version" in sys.argv:
            self.ci.Display("0A")
            print(f"Program version: {self.installer_version}")
            print("\n")
            self.proceed = False
            return self.success
        elif "-i" in sys.argv or "--install" in sys.argv:
            return self.success
        else:
            print(f"Usage:\n\tsudo {self.binary_name(sys.argv[0])} [options]\n")
            self.proceed = False
            return self.success

class Write(Get):
    """ Write a file with the content """
    def file(self, file_name, content) -> int:
        """ Write a file with the content """
        print(f"Writing '{file_name}' ...")
        try:
            file = open(file_name, "w", encoding=self.encoding)
            file.write(f"{content}")
            file.close()
            print("Done!")
            return self.success
        except IOError:
            print("Failed to write the file")
            return self.error

    def nb_char(self, char:str) -> str:
        """ Return the number of characters in a string """
        line = str()
        i = 0
        while i < self.max_char_size:
            line += char
            i+=1
        return line

class Give(Write):
    """ Give permissions to the file """
    def file_permissions(self, file_name):
        """ Give permissions to the file """
        print(f"Giving permissions to '{file_name}' ...")
        try:
            os.chmod(file_name, self.permissions)
            print("Done!")
        except IOError:
            print("Failed to give permissions")
            return self.error
        print("")

class Delete(Give):
    """ Delete a folder/file """
    def list_of_files(self, folder_name) -> None:
        """ Remove the files in a folder """
        try:
            folder_content = os.listdir(folder_name)
            try:
                for i in range(len(folder_content)):
                    Delete.file(self, f"{folder_name}/{folder_content[i]}")
            except IOError:
                print("Failed to delete the files")
                self.status = self.error
                return self.error
        except IOError:
            print("Failed to get the list of files")
            self.status = self.error
            return self.error

    def file(self, file_name) -> int:
        """ Delete a file """
        print(f"Deleting '{file_name}' ...")
        try:
            os.remove(file_name)
            print("Done!")
            return self.success
        except IOError:
            print("Failed to delete the file")
            return self.error

    def folder(self, folder_name) -> int:
        """ Delete a folder """
        print(f"Deleting '{folder_name}' ...")
        try:
            os.rmdir(folder_name)
            print("Done!")
            return self.success
        except IOError:
            print("Failed to delete the folder")
            return self.error

class Install(Delete):
    """ Install the program """
    def exit_on_error(self, code):
        """ Exit the program if there is an error """
        if code == self.error:
            print("\nExiting due to an error")
            sys.exit(code)

    def copy_list_of_files(self, source_folder, destination_folder, file_list):
        """ Copy a list of files """
        for file in file_list:
            self.status = self.copy_file(f"{source_folder}/{file}", f"{destination_folder}")
            if self.status == self.error:
                return self.error
        return self.success

    def copy_file(self, file_name, destination):
        """ Copy a file """
        print(f"Copying '{self.binary_name(file_name)}' to '{destination}' ...")
        try:
            shutil.copy(file_name, destination)
            self.status = self.success
            return self.success
        except IOError:
            self.ci.Display("0C")
            print("Failed to copy the file")
            self.status = self.error
            return self.error

    def create_folder(self, folder_name):
        """ Create a temporary folder to store the files """
        try:
            os.mkdir(folder_name)
            print(f"Created the temporary folder {folder_name} in {self.current_working_directory()}")
        except OSError:
            print(f"Failed to create the folder {folder_name}")
            return self.error

    def install_program(self) -> int:
        """ Install the program """
        self.ci.Display("0B")
        print("Creating temporary folder to temporarily store the files")
        self.create_folder(self.temp_folder_name)
        if self.if_destination_folder_exists(self.destination) == True and self.if_destination_folder_exists(self.temp_folder_name) == True:
            self.ci.Display("03")
            print("Downloading required files ...")
            bash_list = self.list_of_bash_scripts()
            self.bash_files(bash_list)
            self.exit_on_error(self.status)
            self.program_executable()
            self.exit_on_error(self.status)
            self.ci.Display("0D")
            print("Installing the program ...")
            self.copy_list_of_files(self.temp_folder_name, self.destination, os.listdir(self.temp_folder_name))
            self.exit_on_error(self.status)
            self.ci.Display("0E")
            print("Removing the temporary files ...")
            self.list_of_files(self.temp_folder_name)
            self.exit_on_error(self.status)
            self.ci.Display("0F")
            print("Removing the temporary folder ...")
            self.folder(self.temp_folder_name)
            self.exit_on_error(self.status)
        else:
            print("The final destination folder does not exist or is not accessible")
            print("Aborting")
            print("Please try again by running this program with sudo rights")
        self.ci.Display("0A")
        print("The program has successfully been installed")

    def main(self):
        """ Install the program """
        self.max_char_size = len("# Welcome to the install_program.sh script #")
        start_line = self.nb_char("#")
        self.ci.init_pallet()
        self.ci.Display("0A")
        print(f"{start_line}\n# Welcome to the install_program.sh script #\n{start_line}\n")
        print(f"(c) Created by {self.author}")
        if len(sys.argv) > 1:
            self.options()
            if self.proceed == True:
                self.install_program()
                self.max_char_size = len("# Thank you for using the install_program.sh script #")
                start_line = self.nb_char("*")
                print(f"{start_line}\n# Thank you for using the install_program.sh script #\n{start_line}")
                print(f"(c) Created by {self.author}")
                return self.status
        else:
            self.install_program()
            return self.status
        print(f"(c) Created by {self.author}")

CI = Colour(const)
IO = Install(CI)
IO.main()

# self.list_of_bash_scripts()
            # if self.proceed == True:
            #     self.create_folder("temp")
            #     if self.proceed == True:
            #         for bash_script in self.bash_scripts_list:
            #             if bash_script != "":
            #                 bash_script_name = bash_script.split("/")[-1]
            #                 bash_script_link = f"{self.bash_file_tree_link}/{bash_script}"
            #                 bash_script_content = self.online_file(bash_script_link)
            #                 bash_script_content = self.decrypted_content(bash_script_content)
            #                 bash_script_file = f"{self.home}{self.repository}{self.dependencies}/temp/{bash_script_name}"
            #                 self.file(bash_script_file, bash_script_content)
            #                 if self.proceed == True:
            #                     self.file_permissions(bash_script_file)
            #                     if self.proceed == True:
            #                         self.file(bash_script_file, bash_script_content)
            #                         if self.proceed == True:
            #                             self.file_permissions(bash_script_file)
            #                             if self.proceed == True:
            #                                 self.file(bash_script_file, bash_script_content)
            #                                 if self.proceed == True:
            #                                     self.file_permissions(bash_script_file)
            #                                     if self.proceed == True:
            #                                         self.file(bash_script_file, bash_script_content)
            #                                         if self.proceed == True:
            #                                             self.file_permissions(bash_script_file)
            #                                             if self.proceed == True:
            #                                                 self.file(bash_script_file, bash_script_content)
            #                                                 if self.proceed == True:
            #                                                     self.file_permissions(bash_script_file)
            #                                                     if self.proceed == True:
# echo "It will create a folder _git_branch_ and download the program"
# echo "It will also create a file _git_branch_/dependencies/install_prog/install_program.sh"
# echo "This file will be used to install the program"
# echo "If you want to install the program, just run the file"
# echo "If you want to install the dependencies, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program and the dependencies, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program and the dependencies and the program, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies and the program, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies and the program, run the file dependencies/install_prog/install_program.sh"
# echo "If you want to install the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies and the program and the dependencies, run the file dependencies/install_prog/install_program.sh"
